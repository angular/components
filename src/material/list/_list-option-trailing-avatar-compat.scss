@use '@material/feature-targeting/feature-targeting';
@use '@material/list/evolution-mixins' as mdc-list;
@use '../core/mdc-helpers/mdc-helpers';

// For compatibility with the non-MDC selection list, we support avatars that are
// shown at the end of the list option. This is not supported by the MDC list as the
// spec only defines avatars at the beginning of a list item. For selection list options,
// we support changing the checkbox position to `before`. This results in the avatar from
// the list start being moved to the end. Similar to MDC's `--trailing-icon` class, we
// implement a `--trailing-avatar` class that is based on the original `--leading-avatar`
// implementation. See: https://github.com/material-components/material-components-web/blob/3f342c3f4715fd3587f327ce4ea6b5dd314c5c55/packages/mdc-list/_evolution-mixins.scss#L198-L217

@mixin core-styles($query) {
  $feat-structure: feature-targeting.create-target($query, structure);

  @include mdc-helpers.disable-mdc-fallback-declarations {
    .mat-mdc-list-option-with-trailing-avatar {
      @include mdc-list.item-end-spacing(16px, $query: $query);
      @include mdc-list.item-end-size(40px, $query: $query);

      &.mdc-list-item--with-two-lines {
        $top: 32px;
        $bottom: 20px;

        .mdc-list-item__primary-text {
          display: block;
          margin-top: 0;
          line-height: normal;
          margin-bottom: $bottom * -1;

          // This was used by MDC to set the text baseline. We should figure out a way to
          // remove it, because it can introduce unnecessary whitespace at the beginning
          // of the element.
          &::before {
            display: inline-block;
            width: 0;
            height: $top;
            content: '';
            vertical-align: 0;
          }

          &::after {
            display: inline-block;
            width: 0;
            height: $bottom;
            content: '';
            vertical-align: $bottom * -1;
          }
        }
      }

      .mdc-list-item__end {
        @include feature-targeting.targets($feat-structure) {
          border-radius: 50%;
        }
      }
    }
  }
}
