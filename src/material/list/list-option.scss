@use '../checkbox/checkbox-common';
@use '../radio/radio-common';
@use '../core/mdc-helpers/mdc-helpers';
@use './list-option-trailing-avatar-compat';
@use './list-item-hcm-indicator';

// For compatibility with the non-MDC list, we support avatars that are shown at the end
// of the list option. We create a class similar to MDC's `--trailing-icon` one.
@include list-option-trailing-avatar-compat.core-styles($query: mdc-helpers.$mdc-base-styles-query);

.mat-mdc-list-option {
  // We can't use the MDC checkbox here directly, because this checkbox is purely
  // decorative and including the MDC one will bring in unnecessary JS.
  @include checkbox-common.checkbox-structure(false);
  @include checkbox-common.checkbox-noop-animations;
  @include radio-common.radio-structure(false);
  @include radio-common.radio-noop-animations;

  // The internal checkbox/radio is purely decorative, but because it's an `input`, the user can
  // still focus it by tabbing or clicking. Furthermore, `mat-list-option` has the `option` role
  // which doesn't allow a nested `input`. We use `display: none` both to remove it from the tab
  // order and to prevent focus from reaching it through the screen reader's forms mode. Ideally
  // we'd remove the `input` completely, but we can't because MDC uses a `:checked` selector to
  // toggle the selected styles.
  .mdc-checkbox__native-control, .mdc-radio__native-control {
    display: none;
  }
}

.mat-mdc-list-option.mdc-list-item--selected {
  // Improve accessibility for Window High Contrast Mode (HCM) by adding an idicator on the selected
  // option.
  @include list-item-hcm-indicator.private-high-contrast-list-item-indicator();
}
