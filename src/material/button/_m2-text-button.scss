@use 'sass:meta';
@use 'sass:map';
@use '../core/tokens/m2-utils';
@use '../core/theming/theming';
@use '../core/theming/inspection';
@use '../core/style/sass-utils';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mat, button-text);

// Tokens that can't be configured through Angular Material's current theming API,
// but may be in a future version of the theming API.
@function get-unthemable-tokens() {
  @return (
    container-shape: 4px,
    horizontal-padding: 8px,
    icon-offset: 0,
    icon-spacing: 8px,
    with-icon-horizontal-padding: 8px,
  );
}

// Tokens that can be configured through Angular Material's color theming API.
@function get-color-tokens($theme) {
  $is-dark: inspection.get-theme-type($theme) == dark;

  @return (
    disabled-label-text-color:
        inspection.get-theme-color($theme, foreground, disabled-button, if($is-dark, 0.5, 0.38)),
    disabled-state-layer-color: inspection.get-theme-color($theme, foreground, base),
    focus-state-layer-opacity: if($is-dark, 0.24, 0.12),
    hover-state-layer-opacity: if($is-dark, 0.08, 0.04),
    label-text-color: inspection.get-theme-color($theme, foreground, text, 1),
    pressed-state-layer-opacity: if($is-dark, 0.24, 0.12),
    ripple-color: inspection.get-theme-color($theme, foreground, base, 0.1),
    state-layer-color: inspection.get-theme-color($theme, foreground, base),
  );
}

// Generates the mapping for the properties that change based on the button palette color.
@function private-get-color-palette-color-tokens($theme, $palette-name) {
  $color: inspection.get-theme-color($theme, $palette-name);
  $ripple-opacity: 0.1;

  @return (
    label-text-color: inspection.get-theme-color($theme, $palette-name),
    state-layer-color: $color,
    ripple-color: if(
      meta.type-of($color) == color,
      rgba($color, $ripple-opacity),
      inspection.get-theme-color($theme, foreground, base, $ripple-opacity)),
  );
}

// Tokens that can be configured through Angular Material's typography theming API.
@function get-typography-tokens($theme) {
  @return (
    label-text-font: inspection.get-theme-typography($theme, button, font-family),
    label-text-size: inspection.get-theme-typography($theme, button, font-size),
    label-text-tracking: inspection.get-theme-typography($theme, button, letter-spacing),
    label-text-weight: inspection.get-theme-typography($theme, button, font-weight),
    label-text-transform: none,
  );
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($theme) {
  $scale: theming.clamp-density(inspection.get-theme-density($theme), -3);

  @return (
    container-height: map.get((
      0: 36px,
      -1: 32px,
      -2: 28px,
      -3: 24px,
    ), $scale),
    touch-target-display: if($scale < -1, none, block),
  );
}

// Combines the tokens generated by the above functions into a single map with placeholder values.
// This is used to create token slots.
@function get-token-slots() {
  @return sass-utils.deep-merge-all(
      get-unthemable-tokens(),
      get-color-tokens(m2-utils.$placeholder-color-config),
      get-typography-tokens(m2-utils.$placeholder-typography-config),
      get-density-tokens(m2-utils.$placeholder-density-config)
  );
}
