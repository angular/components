@use './button-base';
@use '../core/style/private' as style-private;
@use '../core/style/vendor-prefixes';
@use '../core/tokens/token-utils';
@use '../core/focus-indicators/private' as focus-indicators-private;
@use './m2-button';

.mat-mdc-button-base {
  text-decoration: none;
}

.mdc-button {
  @include vendor-prefixes.user-select(none);
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  min-width: 64px;
  border: none;
  outline: none;
  line-height: inherit;
  -webkit-appearance: none;
  overflow: visible;
  vertical-align: middle;
  background: transparent;
  padding: 0 8px;

  &::-moz-focus-inner {
    padding: 0;
    border: 0;
  }

  &:active {
    outline: none;
  }

  &:hover {
    cursor: pointer;
  }

  &:disabled {
    cursor: default;
    pointer-events: none;
  }

  &[hidden] {
    display: none;
  }

  .mdc-button__label {
    position: relative;
  }
}

@include token-utils.use-tokens(m2-button.$prefix, m2-button.get-token-slots()) {
  .mat-mdc-button {
    padding: 0 #{token-utils.slot(text-horizontal-padding, true)};
    height: token-utils.slot(text-container-height);
    font-family: token-utils.slot(text-label-text-font);
    font-size: token-utils.slot(text-label-text-size);
    letter-spacing: token-utils.slot(text-label-text-tracking);
    text-transform: token-utils.slot(text-label-text-transform);
    font-weight: token-utils.slot(text-label-text-weight);

    &, .mdc-button__ripple {
      border-radius: token-utils.slot(text-container-shape);
    }

    &:not(:disabled) {
      color: token-utils.slot(text-label-text-color);
    }

    // We need to re-apply the disabled tokens since MDC uses
    // `:disabled` which doesn't apply to anchors.
    @include button-base.mat-private-button-disabled {
      color: token-utils.slot(text-disabled-label-text-color);
    }

    @include button-base.mat-private-button-horizontal-layout(
        text-icon-spacing, text-icon-offset, text-with-icon-horizontal-padding);
    @include button-base.mat-private-button-ripple(
        text-ripple-color, text-state-layer-color, text-disabled-state-layer-color,
        text-hover-state-layer-opacity, text-focus-state-layer-opacity,
        text-pressed-state-layer-opacity);
    @include button-base.mat-private-button-touch-target(false, text-touch-target-display);
  }

  .mat-mdc-unelevated-button {
    transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
    height: token-utils.slot(filled-container-height);
    font-family: token-utils.slot(filled-label-text-font);
    font-size: token-utils.slot(filled-label-text-size);
    letter-spacing: token-utils.slot(filled-label-text-tracking);
    text-transform: token-utils.slot(filled-label-text-transform);
    font-weight: token-utils.slot(filled-label-text-weight);
    padding: 0 #{token-utils.slot(filled-horizontal-padding, true)};

    @include button-base.mat-private-button-horizontal-layout(
        filled-icon-spacing, filled-icon-offset);
    @include button-base.mat-private-button-ripple(
        filled-ripple-color, filled-state-layer-color, filled-disabled-state-layer-color,
        filled-hover-state-layer-opacity, filled-focus-state-layer-opacity,
        filled-pressed-state-layer-opacity);
    @include button-base.mat-private-button-touch-target(false, filled-touch-target-display);

    &:not(:disabled) {
      color: token-utils.slot(filled-label-text-color);
      background-color: token-utils.slot(filled-container-color);
    }

    &, .mdc-button__ripple {
      border-radius: token-utils.slot(filled-container-shape);
    }

    // We need to re-apply the disabled tokens since MDC uses
    // `:disabled` which doesn't apply to anchors.
    @include button-base.mat-private-button-disabled {
      color: token-utils.slot(filled-disabled-label-text-color);
      background-color: token-utils.slot(filled-disabled-container-color);
    }
  }

  .mat-mdc-raised-button {
    transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: token-utils.slot(protected-container-elevation-shadow);
    height: token-utils.slot(protected-container-height);
    font-family: token-utils.slot(protected-label-text-font);
    font-size: token-utils.slot(protected-label-text-size);
    letter-spacing: token-utils.slot(protected-label-text-tracking);
    text-transform: token-utils.slot(protected-label-text-transform);
    font-weight: token-utils.slot(protected-label-text-weight);
    padding: 0 #{token-utils.slot(protected-horizontal-padding, true)};

    @include button-base.mat-private-button-horizontal-layout(
        protected-icon-spacing, protected-icon-offset);
    @include button-base.mat-private-button-ripple(
        protected-ripple-color, protected-state-layer-color, protected-disabled-state-layer-color,
        protected-hover-state-layer-opacity, protected-focus-state-layer-opacity,
        protected-pressed-state-layer-opacity);
    @include button-base.mat-private-button-touch-target(false, protected-touch-target-display);

    &:not(:disabled) {
      color: token-utils.slot(protected-label-text-color);
      background-color: token-utils.slot(protected-container-color);
    }

    &, .mdc-button__ripple {
      border-radius: token-utils.slot(protected-container-shape);
    }

    &:hover {
      box-shadow: token-utils.slot(protected-hover-container-elevation-shadow);
    }

    &:focus {
      box-shadow: token-utils.slot(protected-focus-container-elevation-shadow);
    }

    &:active, &:focus:active {
      box-shadow: token-utils.slot(protected-pressed-container-elevation-shadow);
    }

    // We need to re-apply the disabled tokens since MDC uses
    // `:disabled` which doesn't apply to anchors.
    @include button-base.mat-private-button-disabled {
      color: token-utils.slot(protected-disabled-label-text-color);
      background-color: token-utils.slot(protected-disabled-container-color);

      &.mat-mdc-button-disabled {
        box-shadow: token-utils.slot(protected-disabled-container-elevation-shadow);
      }
    }
  }

  .mat-mdc-outlined-button {
    border-style: solid;
    transition: border 280ms cubic-bezier(0.4, 0, 0.2, 1);
    height: token-utils.slot(outlined-container-height);
    font-family: token-utils.slot(outlined-label-text-font);
    font-size: token-utils.slot(outlined-label-text-size);
    letter-spacing: token-utils.slot(outlined-label-text-tracking);
    text-transform: token-utils.slot(outlined-label-text-transform);
    font-weight: token-utils.slot(outlined-label-text-weight);
    border-radius: token-utils.slot(outlined-container-shape);
    border-width: token-utils.slot(outlined-outline-width);
    padding: 0 #{token-utils.slot(outlined-horizontal-padding, true)};

    @include button-base.mat-private-button-horizontal-layout(
        outlined-icon-spacing, outlined-icon-offset);
    @include button-base.mat-private-button-ripple(
        outlined-ripple-color, outlined-state-layer-color, outlined-disabled-state-layer-color,
        outlined-hover-state-layer-opacity, outlined-focus-state-layer-opacity,
        outlined-pressed-state-layer-opacity);
    @include button-base.mat-private-button-touch-target(false, outlined-touch-target-display);

    &:not(:disabled) {
      color: token-utils.slot(outlined-label-text-color);
      border-color: token-utils.slot(outlined-outline-color);
    }

    // We need to re-apply the disabled tokens since MDC uses
    // `:disabled` which doesn't apply to anchors.
    @include button-base.mat-private-button-disabled {
      color: token-utils.slot(outlined-disabled-label-text-color);
      border-color: token-utils.slot(outlined-disabled-outline-color);
    }
  }

  .mat-tonal-button {
    transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
    height: token-utils.slot(tonal-container-height);
    font-family: token-utils.slot(tonal-label-text-font);
    font-size: token-utils.slot(tonal-label-text-size);
    letter-spacing: token-utils.slot(tonal-label-text-tracking);
    text-transform: token-utils.slot(tonal-label-text-transform);
    font-weight: token-utils.slot(tonal-label-text-weight);
    padding: 0 #{token-utils.slot(tonal-horizontal-padding, true)};

    &:not(:disabled) {
      color: token-utils.slot(tonal-label-text-color);
      background-color: token-utils.slot(tonal-container-color);
    }

    &, .mdc-button__ripple {
      border-radius: token-utils.slot(tonal-container-shape);
    }

    // We need to re-apply the disabled tokens since MDC uses
    // `:disabled` which doesn't apply to anchors.
    @include button-base.mat-private-button-disabled {
      color: token-utils.slot(tonal-disabled-label-text-color);
      background-color: token-utils.slot(tonal-disabled-container-color);
    }

    @include button-base.mat-private-button-horizontal-layout(
        tonal-icon-spacing, tonal-icon-offset);
    @include button-base.mat-private-button-ripple(
        tonal-ripple-color, tonal-state-layer-color, tonal-disabled-state-layer-color,
        tonal-hover-state-layer-opacity, tonal-focus-state-layer-opacity,
        tonal-pressed-state-layer-opacity);
    @include button-base.mat-private-button-touch-target(false, tonal-touch-target-display);
  }
}

.mat-mdc-button,
.mat-mdc-unelevated-button,
.mat-mdc-raised-button,
.mat-mdc-outlined-button,
.mat-tonal-button {
  @include button-base.mat-private-button-interactive();
  @include style-private.private-animation-noop();

  // Similar to MDC's `_icon-structure`, apart from the margin which we
  // handle via custom tokens in `mat-private-button-horizontal-layout`.
  & > .mat-icon {
    $icon-size: 1.125rem;
    display: inline-block;
    position: relative;
    vertical-align: top;
    font-size: $icon-size;
    height: $icon-size;
    width: $icon-size;
  }
}

// Since the stroked button has has an actual border that reduces the available space for
// child elements such as the ripple container or focus overlay, an inherited border radius
// for the absolute-positioned child elements does not work properly. This is because the
// child element cannot expand to the same boundaries as the parent element with a border.
// In order to work around this issue by *not* hiding overflow, we adjust the child elements
// to fully cover the actual button element. This means that the border-radius would be correct
// then. See: https://github.com/angular/components/issues/13738
.mat-mdc-outlined-button .mat-mdc-button-ripple,
.mat-mdc-outlined-button .mdc-button__ripple {
  $offset: -1px;
  top: $offset;
  left: $offset;
  bottom: $offset;
  right: $offset;
}

// For the button element, default inset/offset values are necessary to ensure that
// the focus indicator is sufficiently contrastive and renders appropriately.
.mat-mdc-unelevated-button,
.mat-tonal-button,
.mat-mdc-raised-button {
  .mat-focus-indicator::before {
    $default-border-width: focus-indicators-private.$default-border-width;
    $border-width: var(--mat-focus-indicator-border-width, #{$default-border-width});
    $offset: calc(#{$border-width} + 2px);
    margin: calc(#{$offset} * -1);
  }
}

.mat-mdc-outlined-button .mat-focus-indicator::before {
  $default-border-width: focus-indicators-private.$default-border-width;
  $border-width: var(--mat-focus-indicator-border-width, #{$default-border-width});
  $offset: calc(#{$border-width} + 3px);
  margin: calc(#{$offset} * -1);
}
