@use 'sass:map';
@use '../core/tokens/m2-utils';
@use '../core/style/elevation';
@use '../core/theming/inspection';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mat, fab-extended);

@function get-unthemable-tokens() {
  @return (
    container-height: 48px,
    container-shape: 24px,
    container-elevation-shadow: elevation.get-box-shadow(6),
    focus-container-elevation-shadow: elevation.get-box-shadow(8),
    hover-container-elevation-shadow: elevation.get-box-shadow(8),
    pressed-container-elevation-shadow: elevation.get-box-shadow(12),
  );
}

// Tokens that can be configured through Angular Material's color theming API.
@function get-color-tokens($theme) {
  @return ();
}

// Tokens that can be configured through Angular Material's typography theming API.
@function get-typography-tokens($theme) {
  @return (
    label-text-font: inspection.get-theme-typography($theme, button, font-family),
    label-text-size: inspection.get-theme-typography($theme, button, font-size),
    label-text-tracking: inspection.get-theme-typography($theme, button, letter-spacing),
    label-text-weight: inspection.get-theme-typography($theme, button, font-weight)
  );
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($theme) {
  @return ();
}

// Combines the tokens generated by the above functions into a single map with placeholder values.
// This is used to create token slots.
@function get-token-slots() {
  @return map.merge(
    get-unthemable-tokens(),
    map.merge(
      get-color-tokens(m2-utils.$placeholder-color-config),
      map.merge(
        get-typography-tokens(m2-utils.$placeholder-typography-config),
        get-density-tokens(m2-utils.$placeholder-density-config)
      )
    )
  );
}
