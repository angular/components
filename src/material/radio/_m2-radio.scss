@use 'sass:map';
@use '../core/tokens/m2-utils';
@use '../core/theming/theming';
@use '../core/theming/inspection';
@use '../core/style/sass-utils';
@use '../core/m2/palette' as m2-palette;
@use '../core/m2/theming' as m2-theming;

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mat, radio);

// Tokens that can't be configured through Angular Material's current theming API,
// but may be in a future version of the theming API.
@function get-unthemable-tokens() {
  @return (
    disabled-selected-icon-opacity: 0.38,
    disabled-unselected-icon-opacity: 0.38,
    // This is specified both here and in the density tokens, because it
    // determines the size of the radio button itself and there are internal
    // tests who don't configure the theme correctly.
    state-layer-size: 40px,
  );
}

// Tokens that can be configured through Angular Material's color theming API.
@function get-color-tokens($theme, $palette-name: accent) {
  $is-dark: inspection.get-theme-type($theme) == dark;
  $palette-color: inspection.get-theme-color($theme, $palette-name, default);
  $icon-color: m2-theming.get-color-from-palette(m2-palette.$gray-palette, if($is-dark, 200, 900));

  @return (
    checked-ripple-color: inspection.get-theme-color($theme, $palette-name, default),
    disabled-label-color: inspection.get-theme-color($theme, foreground, disabled-text),
    disabled-selected-icon-color: inspection.get-theme-color($theme, foreground, icon, 1),
    disabled-unselected-icon-color: inspection.get-theme-color($theme, foreground, icon, 1),
    label-text-color: inspection.get-theme-color($theme, foreground, text),
    ripple-color: inspection.get-theme-color($theme, foreground, base),
    selected-focus-icon-color: $palette-color,
    selected-hover-icon-color: $palette-color,
    selected-icon-color: $palette-color,
    selected-pressed-icon-color: $palette-color,
    unselected-focus-icon-color: $icon-color,
    unselected-hover-icon-color: $icon-color,
    unselected-icon-color: inspection.get-theme-color($theme, foreground, icon, 0.54),
    unselected-pressed-icon-color: inspection.get-theme-color($theme, foreground, icon, 0.54),
  );
}

// Tokens that can be configured through Angular Material's typography theming API.
@function get-typography-tokens($theme) {
  @return (
    label-text-font: inspection.get-theme-typography($theme, body-2, font-family),
    label-text-line-height: inspection.get-theme-typography($theme, body-2, line-height),
    label-text-size: inspection.get-theme-typography($theme, body-2, font-size),
    label-text-tracking: inspection.get-theme-typography($theme, body-2, letter-spacing),
    label-text-weight: inspection.get-theme-typography($theme, body-2, font-weight)
  );
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($theme) {
  $scale: theming.clamp-density(inspection.get-theme-density($theme), -3);

  @return (
    // The diameter of the radio's ripple.
    state-layer-size: map.get((
      0: 40px,
      -1: 36px,
      -2: 32px,
      -3: 28px,
    ), $scale),
    touch-target-display: if($scale < -1, none, block)
  );
}

// Combines the tokens generated by the above functions into a single map with placeholder values.
// This is used to create token slots.
@function get-token-slots() {
  @return sass-utils.deep-merge-all(
    get-unthemable-tokens(),
    get-color-tokens(m2-utils.$placeholder-color-config),
    get-typography-tokens(m2-utils.$placeholder-typography-config),
    get-density-tokens(m2-utils.$placeholder-density-config)
  );
}
