@use 'sass:color';
@use './m2-chip';
@use './m3-chip';
@use '../core/tokens/token-utils';
@use '../core/theming/inspection';
@use '../core/typography/typography';
@use 'sass:map';

/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)
/// for the mat-chips.
/// @param {Map} $theme The theme to generate base styles for.
@mixin base($theme) {
  @if inspection.get-theme-version($theme) == 1 {
    @include token-utils.values(map.get(m3-chip.get-tokens($theme), base));
  } @else {
    .mat-mdc-standard-chip {
      @include token-utils.values(map.get(m2-chip.get-tokens($theme), base));
    }
  }
}

/// Outputs color theme styles for the mat-chips.
/// @param {Map} $theme The theme to generate color styles for.
/// @param {String} $color-variant The color variant to use for the component (M3 only)
@mixin color($theme, $color-variant: null) {
  @if inspection.get-theme-version($theme) == 1 {
    @include token-utils.values(
        map.get(m3-chip.get-tokens($theme, $color-variant), color));
  } @else {
    .mat-mdc-standard-chip {
      @include token-utils.values(map.get(m2-chip.get-tokens($theme), color));

      &.mat-mdc-chip-selected,
      &.mat-mdc-chip-highlighted {
        &.mat-primary {
          @include token-utils.values(
              m2-chip.private-get-color-palette-color-tokens($theme, primary));
        }

        &.mat-accent {
          @include token-utils.values(
              m2-chip.private-get-color-palette-color-tokens($theme, secondary));
        }

        &.mat-warn {
          @include token-utils.values(
              m2-chip.private-get-color-palette-color-tokens($theme, error));
        }
      }
    }
  }
}

/// Outputs typography theme styles for the mat-chips.
/// @param {Map} $theme The theme to generate typography styles for.
@mixin typography($theme) {
  @if inspection.get-theme-version($theme) == 1 {
    @include token-utils.values(map.get(m3-chip.get-tokens($theme), typography));
  } @else {
    .mat-mdc-standard-chip {
      @include token-utils.values(map.get(m2-chip.get-tokens($theme), typography));
    }
  }
}

/// Outputs density theme styles for the mat-chips.
/// @param {Map} $theme The theme to generate density styles for.
@mixin density($theme) {
  @if inspection.get-theme-version($theme) == 1 {
    @include token-utils.values(map.get(m3-chip.get-tokens($theme), density));
  } @else {
    .mat-mdc-chip.mat-mdc-standard-chip {
      @include token-utils.values(map.get(m2-chip.get-tokens($theme), density));
    }
  }
}

/// Defines the tokens that will be available in the `overrides` mixin and for docs extraction.
@function _define-overrides() {
  @return (
    (
      namespace: chip,
      tokens: token-utils.get-overrides(m3-chip.get-tokens(), chip)
    ),
  );
}

/// Outputs the CSS variable values for the given tokens.
/// @param {Map} $tokens The token values to emit.
@mixin overrides($tokens: ()) {
    @include token-utils.batch-create-token-values($tokens, _define-overrides());
}

/// Outputs all (base, color, typography, and density) theme styles for the mat-chips.
/// @param {Map} $theme The theme to generate styles for.
/// @param {String} $color-variant The color variant to use for the component (M3 only)
@mixin theme($theme, $color-variant: null) {
  @if inspection.get-theme-version($theme) == 1 {
    @include base($theme);
    @include color($theme, $color-variant);
    @include density($theme);
    @include typography($theme);
  } @else {
    @include base($theme);
    @if inspection.theme-has($theme, color) {
      @include color($theme);
    }
    @if inspection.theme-has($theme, density) {
      @include density($theme);
    }
    @if inspection.theme-has($theme, typography) {
      @include typography($theme);
    }
  }
}
