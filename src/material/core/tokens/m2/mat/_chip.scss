@use 'sass:map';
@use 'sass:meta';
@use 'sass:color';
@use '../../token-definition';
@use '../../../theming/inspection';
@use '../../../style/sass-utils';
@use '../../../m2/palette' as m2-palette;
@use '../../../theming/theming';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mat, chip);

// Tokens that can't be configured through Angular Material's current theming API,
// but may be in a future version of the theming API.
@function get-unthemable-tokens() {
  @return (
    container-shape-radius: 16px,
    disabled-container-opacity: 0.4,
    disabled-outline-color: transparent,
    flat-selected-outline-width: 0,
    focus-outline-color: transparent,
    hover-state-layer-opacity: 0.04,
    outline-color: transparent,
    outline-width: 0,
    selected-hover-state-layer-opacity: 0.04,
    selected-trailing-action-state-layer-color: transparent,
    trailing-action-focus-opacity: 1,
    trailing-action-focus-state-layer-opacity: 0,
    trailing-action-hover-state-layer-opacity: 0,
    trailing-action-opacity: 0.54,
    trailing-action-state-layer-color: transparent,
    with-avatar-avatar-shape-radius: 14px,
    with-avatar-avatar-size: 28px,
    with-avatar-disabled-avatar-opacity: 1,
    with-icon-disabled-icon-opacity: 1,
    with-icon-icon-size: 18px,
    with-trailing-icon-disabled-trailing-icon-opacity: 1,
  );
}

// Tokens that can be configured through Angular Material's color theming API.
@function get-color-tokens($theme, $palette-name: null) {
  $foreground: null;
  $background: null;
  $state-layer-color: inspection.get-theme-color($theme, foreground, base);
  $state-layer-opacity: 0.12; // 0.12 is a common value in Material Design for opacity.
  $surface: inspection.get-theme-color($theme, background, card);

  @if $palette-name == null {
    $is-dark: inspection.get-theme-type($theme) == dark;
    $grey-50: map.get(m2-palette.$grey-palette, 50);
    $grey-900: map.get(m2-palette.$grey-palette, 900);
    $foreground: if($is-dark, $grey-50, $grey-900);

    $surface: inspection.get-theme-color($theme, background, card);
    $background: if(
        meta.type-of($state-layer-color) == color and meta.type-of($surface) == color,
        color.mix($state-layer-color, $surface, 12%),
        $state-layer-color
    );
  }
  @else {
    $background: inspection.get-theme-color($theme, $palette-name);
    $foreground: inspection.get-theme-color($theme, $palette-name, default-contrast);
  }
  @return (
    disabled-label-text-color: $foreground,
    elevated-container-color: $background,
    elevated-disabled-container-color: $background,
    elevated-selected-container-color: $background,
    flat-disabled-selected-container-color: $background,
    focus-state-layer-color: $state-layer-color,
    focus-state-layer-opacity: $state-layer-opacity,
    hover-state-layer-color: $state-layer-color,
    label-text-color: $foreground,
    selected-disabled-trailing-icon-color: $foreground,
    selected-focus-state-layer-color: $state-layer-color,
    selected-focus-state-layer-opacity: $state-layer-opacity,
    selected-hover-state-layer-color: $state-layer-color,
    selected-label-text-color: $foreground,
    selected-trailing-icon-color: $foreground,
    with-icon-disabled-icon-color: $foreground,
    with-icon-icon-color: $foreground,
    with-icon-selected-icon-color: $foreground,
    with-trailing-icon-disabled-trailing-icon-color: $foreground,
    with-trailing-icon-trailing-icon-color: $foreground,
  );
}

// Tokens that can be configured through Angular Material's typography theming API.
@function get-typography-tokens($theme) {
  @return (
    label-text-font: inspection.get-theme-typography($theme, body-2, font-family),
    label-text-line-height: inspection.get-theme-typography($theme, body-2, line-height),
    label-text-size: inspection.get-theme-typography($theme, body-2, font-size),
    label-text-tracking: inspection.get-theme-typography($theme, body-2, letter-spacing),
    label-text-weight: inspection.get-theme-typography($theme, body-2, font-weight)
  );
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($theme) {
  $scale: theming.clamp-density(inspection.get-theme-density($theme), -2);
  @return (
    // The height of the chip.
    container-height:
    map.get(
        (
          0: 32px,
          -1: 28px,
          -2: 24px,
        ),
        $scale
    )
  );
}

// Combines the tokens generated by the above functions into a single map with placeholder values.
// This is used to create token slots.
@function get-token-slots() {
  @return sass-utils.deep-merge-all(
      get-unthemable-tokens(),
      get-color-tokens(token-definition.$placeholder-color-config),
      get-typography-tokens(token-definition.$placeholder-typography-config),
      get-density-tokens(token-definition.$placeholder-density-config)
  );
}
