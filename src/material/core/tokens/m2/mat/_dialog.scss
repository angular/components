@use '../../token-definition';
@use '../../../style/elevation';
@use '../../../style/sass-utils';
@use '../../../theming/inspection';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mat, dialog);

// Tokens that can't be configured through Angular Material's current theming API,
// but may be in a future version of the theming API.
@function get-unthemable-tokens() {
  @return (
    container-shape: 4px,
    container-elevation-shadow: elevation.get-box-shadow(24),
    container-max-width: 80vw,
    container-small-max-width: 80vw,
    container-min-width: 0,
    actions-alignment: start,
    actions-padding: 8px,
    content-padding: 20px 24px,
    with-actions-content-padding: 20px 24px,

    // Note: the CSS class is `title` while the M2 tokens call it `subhead`.
    // M3 calls it `headline` which is what we're aligning with.
    headline-padding: 0 24px 9px,
  );
}

// Tokens that can be configured through Angular Material's color theming API.
@function get-color-tokens($theme) {
  $is-dark: inspection.get-theme-type($theme) == dark;

  // Ideally we would derive all values directly from the theme, but it causes a lot of regressions
  // internally. For now we fall back to the old hardcoded behavior only for internal apps.
  $text-base: if(token-definition.$private-is-internal-build,
    if($is-dark, #fff, #000),
    inspection.get-theme-color($theme, foreground, text, 1)
  );

  @return (
    container-color: inspection.get-theme-color($theme, background, dialog),
    subhead-color: sass-utils.safe-color-change($text-base, $alpha: 0.87),
    supporting-text-color: sass-utils.safe-color-change($text-base, $alpha: 0.6),
  );
}

// Tokens that can be configured through Angular Material's typography theming API.
@function get-typography-tokens($theme) {
  @return (
    subhead-font: inspection.get-theme-typography($theme, headline-6, font-family),
    subhead-line-height: inspection.get-theme-typography($theme, headline-6, line-height),
    subhead-size: inspection.get-theme-typography($theme, headline-6, font-size),
    subhead-weight: inspection.get-theme-typography($theme, headline-6, font-weight),
    subhead-tracking: inspection.get-theme-typography($theme, headline-6, letter-spacing),
    supporting-text-font: inspection.get-theme-typography($theme, body-1, font-family),
    supporting-text-line-height: inspection.get-theme-typography($theme, body-1, line-height),
    supporting-text-size: inspection.get-theme-typography($theme, body-1, font-size),
    supporting-text-weight: inspection.get-theme-typography($theme, body-1, font-weight),
    supporting-text-tracking: inspection.get-theme-typography($theme, body-1, letter-spacing),
  );
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($theme) {
  @return ();
}

// Combines the tokens generated by the above functions into a single map with placeholder values.
// This is used to create token slots.
@function get-token-slots() {
  @return sass-utils.deep-merge-all(
      get-unthemable-tokens(),
      get-color-tokens(token-definition.$placeholder-color-config),
      get-typography-tokens(token-definition.$placeholder-typography-config),
      get-density-tokens(token-definition.$placeholder-density-config)
  );
}
