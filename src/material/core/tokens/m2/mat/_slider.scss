@use 'sass:map';
@use '../../token-definition';
@use '../../../style/sass-utils';
@use '../../../theming/inspection';
@use '../../../style/elevation';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mat, slider);

// Tokens that can't be configured through Angular Material's current theming API,
// but may be in a future version of the theming API.
@function get-unthemable-tokens() {
  @return (
    active-track-height: 6px,
    active-track-shape: 9999px,
    handle-elevation: elevation.get-box-shadow(1),
    handle-height: 20px,
    handle-shape: 50%,
    handle-width: 20px,
    inactive-track-height: 4px,
    inactive-track-shape: 9999px,
    value-indicator-border-radius: 4px,
    value-indicator-caret-display: block,
    value-indicator-container-transform: translateX(-50%),
    value-indicator-height: 32px,
    value-indicator-padding: 0 12px,
    value-indicator-text-transform: none,
    value-indicator-width: auto,
    with-overlap-handle-outline-width: 1px,
    with-tick-marks-active-container-opacity: 0.6,
    with-tick-marks-container-shape: 50%,
    with-tick-marks-container-size: 2px,
    with-tick-marks-inactive-container-opacity: 0.6,
  );
}

// Tokens that can be configured through Angular Material's color theming API.
@function get-color-tokens($theme) {
  $theme-color-tokens: private-get-color-palette-color-tokens($theme, primary);
  $is-dark: inspection.get-theme-type($theme) == dark;
  $elevation: inspection.get-theme-color($theme, foreground, elevation);
  $on-surface: if($is-dark, #fff, #000);

  @return map.merge(
    $theme-color-tokens,
    (
      disabled-active-track-color: $on-surface,
      disabled-handle-color: $on-surface,
      disabled-inactive-track-color: $on-surface,
      label-container-color: $on-surface,
      label-label-text-color: if($is-dark, #000, #fff),
      value-indicator-opacity: if($is-dark, 0.9, 0.6),
      with-overlap-handle-outline-color: #fff,
      with-tick-marks-disabled-container-color: $on-surface,
    ),
  );
}

// Generates tokens for the slider properties that change based on the theme.
@function private-get-color-palette-color-tokens($theme, $palette-name) {
  $color: inspection.get-theme-color($theme, $palette-name);
  $hover-ripple-color: if($color == null, null, #{rgba($color, 0.05)});
  $focus-ripple-color: if($color == null, null, #{rgba($color, 0.2)});
  $on-color: inspection.get-theme-color($theme, $palette-name, default-contrast);

  @return (
    active-track-color: $color,
    focus-handle-color: $color,
    focus-state-layer-color: $focus-ripple-color,
    handle-color: $color,
    hover-handle-color: $color,
    hover-state-layer-color: $hover-ripple-color,
    inactive-track-color: $color,
    ripple-color: $color,
    with-tick-marks-active-container-color: $on-color,
    with-tick-marks-inactive-container-color: $color,
  );
}

// Tokens that can be configured through Angular Material's typography theming API.
@function get-typography-tokens($theme) {
  @return (
    label-label-text-font: inspection.get-theme-typography($theme, subtitle-2, font-family),
    label-label-text-size: inspection.get-theme-typography($theme, subtitle-2, font-size),
    label-label-text-line-height: inspection.get-theme-typography($theme, subtitle-2, line-height),
    label-label-text-tracking: inspection.get-theme-typography($theme, subtitle-2, letter-spacing),
    label-label-text-weight: inspection.get-theme-typography($theme, subtitle-2, font-weight),
  );
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($theme) {
  @return ();
}

// Combines the tokens generated by the above functions into a single map with placeholder values.
// This is used to create token slots.
@function get-token-slots() {
  @return sass-utils.deep-merge-all(
    get-unthemable-tokens(),
    get-color-tokens(token-definition.$placeholder-color-config),
    get-typography-tokens(token-definition.$placeholder-typography-config),
    get-density-tokens(token-definition.$placeholder-density-config)
  );
}
