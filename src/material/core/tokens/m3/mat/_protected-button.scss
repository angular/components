@use 'sass:map';
@use '../../../style/elevation';
@use '../../token-definition';
@use '../../../style/sass-utils';

// The prefix used to generate the fully qualified name for tokens in this file.
// Note: in M3 the "protected" button is called "elevated".
$prefix: (mat, protected-button);

/// Generates custom tokens for the mat-raised-button.
/// @param {Map} $systems The MDC system tokens
/// @param {Boolean} $exclude-hardcoded Whether to exclude hardcoded token values
/// @param {Map} $token-slots Possible token slots
/// @return {Map} A set of custom tokens for the mat-raised-button
@function get-tokens($systems, $exclude-hardcoded, $token-slots) {
  // Note: in M3 the "protected" button is called "elevated".
  $tokens: (
    container-color: map.get($systems, md-sys-color, surface),
    container-elevation: map.get($systems, md-sys-elevation, level1),
    container-height: if($exclude-hardcoded, null, 40px),
    container-shape: map.get($systems, md-sys-shape, corner-full),
    disabled-container-color:
        sass-utils.safe-color-change(map.get($systems, md-sys-color, on-surface), $alpha: 0.12),
    disabled-container-elevation: map.get($systems, md-sys-elevation, level0),
    disabled-label-text-color:
        sass-utils.safe-color-change(map.get($systems, md-sys-color, on-surface), $alpha: 0.38),
    disabled-state-layer-color: map.get($systems, md-sys-color, on-surface-variant),
    focus-container-elevation: map.get($systems, md-sys-elevation, level1),
    focus-state-layer-opacity: map.get($systems, md-sys-state, focus-state-layer-opacity),
    horizontal-padding: token-definition.hardcode(24px, $exclude-hardcoded),
    hover-container-elevation: map.get($systems, md-sys-elevation, level2),
    hover-state-layer-opacity: map.get($systems, md-sys-state, hover-state-layer-opacity),
    icon-offset: token-definition.hardcode(-8px, $exclude-hardcoded),
    icon-spacing: token-definition.hardcode(8px, $exclude-hardcoded),
    label-text-color: map.get($systems, md-sys-color, primary),
    label-text-font: map.get($systems, md-sys-typescale, label-large-font),
    label-text-size: map.get($systems, md-sys-typescale, label-large-size),
    label-text-tracking: map.get($systems, md-sys-typescale, label-large-tracking),
    label-text-weight: map.get($systems, md-sys-typescale, label-large-weight),
    pressed-container-elevation: map.get($systems, md-sys-elevation, level1),
    pressed-state-layer-opacity: map.get($systems, md-sys-state, pressed-state-layer-opacity),
    ripple-color: sass-utils.safe-color-change(
        map.get($systems, md-sys-color, primary),
        $alpha: map.get($systems, md-sys-state, pressed-state-layer-opacity)),
    state-layer-color: map.get($systems, md-sys-color, primary),
  );

  $variant-tokens: (
    primary: (), // Default, no overrides needed.
    secondary: (
      state-layer-color: map.get($systems, md-sys-color, secondary),
      ripple-color: sass-utils.safe-color-change(
          map.get($systems, md-sys-color, secondary),
        $alpha: map.get($systems, md-sys-state, pressed-state-layer-opacity)
      ),
      label-text-color: map.get($systems, md-sys-color, secondary),
    ),
    tertiary: (
      state-layer-color: map.get($systems, md-sys-color, tertiary),
      ripple-color: sass-utils.safe-color-change(
          map.get($systems, md-sys-color, tertiary),
        $alpha: map.get($systems, md-sys-state, pressed-state-layer-opacity)
      ),
      label-text-color: map.get($systems, md-sys-color, tertiary),
    ),
    error: (
      state-layer-color: map.get($systems, md-sys-color, error),
      ripple-color: sass-utils.safe-color-change(
          map.get($systems, md-sys-color, error),
        $alpha: map.get($systems, md-sys-state, pressed-state-layer-opacity)
      ),
      label-text-color: map.get($systems, md-sys-color, error),
    )
  );

  $elevation-tokens: (
    container-elevation,
    disabled-container-elevation,
    focus-container-elevation,
    hover-container-elevation,
    pressed-container-elevation,
  );

  @each $token in $elevation-tokens {
    $elevation: map.get($tokens, $token);

    @if ($elevation != null) {
      $tokens: map.set($tokens, $token + -shadow, elevation.get-box-shadow($elevation));
    }
  }

  @return token-definition.namespace-tokens($prefix, ($tokens, $variant-tokens), $token-slots);
}
