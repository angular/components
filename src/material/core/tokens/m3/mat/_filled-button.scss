@use 'sass:map';
@use '../../token-definition';
@use '../../../style/sass-utils';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mat, filled-button);

/// Generates custom tokens for the mat-flat-button.
/// @param {Map} $systems The MDC system tokens
/// @param {Boolean} $exclude-hardcoded Whether to exclude hardcoded token values
/// @param {Map} $token-slots Possible token slots
/// @return {Map} A set of custom tokens for the mat-flat-button
@function get-tokens($systems, $exclude-hardcoded, $token-slots) {
  $tokens: (
    horizontal-padding: token-definition.hardcode(24px, $exclude-hardcoded),
    icon-spacing: token-definition.hardcode(8px, $exclude-hardcoded),
    icon-offset: token-definition.hardcode(-8px, $exclude-hardcoded),
    state-layer-color: map.get($systems, md-sys-color, on-primary),
    disabled-state-layer-color: map.get($systems, md-sys-color, on-surface-variant),
    ripple-color: sass-utils.safe-color-change(
        map.get($systems, md-sys-color, on-primary),
      $alpha: map.get($systems, md-sys-state, pressed-state-layer-opacity)
    ),
    container-color: map.get($systems, md-sys-color, primary),
    container-height: if($exclude-hardcoded, null, 40px),
    container-shape: map.get($systems, md-sys-shape, corner-full),
    disabled-container-color: sass-utils.safe-color-change(
        map.get($systems, md-sys-color, on-surface), $alpha: 0.12),
    disabled-label-text-color: sass-utils.safe-color-change(
        map.get($systems, md-sys-color, on-surface), $alpha: 0.38),
    focus-state-layer-opacity: map.get($systems, md-sys-state, focus-state-layer-opacity),
    hover-state-layer-opacity: map.get($systems, md-sys-state, hover-state-layer-opacity),
    label-text-color: map.get($systems, md-sys-color, on-primary),
    label-text-font: map.get($systems, md-sys-typescale, label-large-font),
    label-text-size: map.get($systems, md-sys-typescale, label-large-size),
    label-text-tracking: map.get($systems, md-sys-typescale, label-large-tracking),
    label-text-weight: map.get($systems, md-sys-typescale, label-large-weight),
    pressed-state-layer-opacity: map.get($systems, md-sys-state, pressed-state-layer-opacity),
  );

  $variant-tokens: (
    primary: (), // Default, no overrides needed.
    secondary: (
      state-layer-color: map.get($systems, md-sys-color, on-secondary),
      ripple-color: sass-utils.safe-color-change(
          map.get($systems, md-sys-color, on-secondary),
        $alpha: map.get($systems, md-sys-state, pressed-state-layer-opacity)
      ),
      container-color: map.get($systems, md-sys-color, secondary),
      label-text-color: map.get($systems, md-sys-color, on-secondary),
    ),
    tertiary: (
      state-layer-color: map.get($systems, md-sys-color, on-tertiary),
      ripple-color: sass-utils.safe-color-change(
          map.get($systems, md-sys-color, on-tertiary),
        $alpha: map.get($systems, md-sys-state, pressed-state-layer-opacity)
      ),
      container-color: map.get($systems, md-sys-color, tertiary),
      label-text-color: map.get($systems, md-sys-color, on-tertiary),
    ),
    error: (
      state-layer-color: map.get($systems, md-sys-color, on-error),
      ripple-color: sass-utils.safe-color-change(
          map.get($systems, md-sys-color, on-error),
        $alpha: map.get($systems, md-sys-state, pressed-state-layer-opacity)
      ),
      container-color: map.get($systems, md-sys-color, error),
      label-text-color: map.get($systems, md-sys-color, on-error),
    )
  );

  @return token-definition.namespace-tokens($prefix, ($tokens, $variant-tokens), $token-slots);
}
