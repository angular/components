@use 'sass:map';
@use '../../token-definition';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mat, circular-progress);

/// Generates the tokens for MDC circular-progress
/// @param {Map} $systems The MDC system tokens
/// @param {Boolean} $exclude-hardcoded Whether to exclude hardcoded token values
/// @param {Map} $token-slots Possible token slots
/// @return {Map} A set of tokens for the MDC circular-progress
@function get-tokens($systems, $exclude-hardcoded, $token-slots) {
  $mdc-tokens: values($systems, $exclude-hardcoded);
  $variant-tokens: (
    primary: (), // Default, no overrides needed
    secondary: (
      active-indicator-color: map.get($systems, md-sys-color, secondary),
    ),
    tertiary: (
      active-indicator-color: map.get($systems, md-sys-color, tertiary),
    ),
    error: (
      active-indicator-color: map.get($systems, md-sys-color, error),
    )
  );

  @return token-definition.namespace-tokens(
      $prefix, ($mdc-tokens, $variant-tokens), $token-slots);
}

@function values($deps, $exclude-hardcoded-values: false) {
  @return (
    active-indicator-color: map.get($deps, md-sys-color, primary),
    active-indicator-shape: map.get($deps, md-sys-shape, corner-none),
    active-indicator-width: if($exclude-hardcoded-values, null, 4px),
    four-color-active-indicator-four-color: map.get($deps, md-sys-color, tertiary-container),
    four-color-active-indicator-one-color: map.get($deps, md-sys-color, primary),
    four-color-active-indicator-three-color: map.get($deps, md-sys-color, tertiary),
    four-color-active-indicator-two-color: map.get($deps, md-sys-color, primary-container),
    size: if($exclude-hardcoded-values, null, 48px)
  );
}
