@use 'sass:map';
@use '../../token-definition';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mat, checkbox);

/// Generates the tokens for MDC checkbox
/// @param {Map} $systems The MDC system tokens
/// @param {Boolean} $exclude-hardcoded Whether to exclude hardcoded token values
/// @param {Map} $token-slots Possible token slots
/// @return {Map} A set of tokens for the MDC checkbox
@function get-tokens($systems, $exclude-hardcoded, $token-slots) {
  $mdc-tokens: values($systems, $exclude-hardcoded);
  $variant-tokens: (
    primary: (), // Default, no overrides needed
    secondary: (
      selected-container-color: map.get($systems, md-sys-color, secondary),
      selected-focus-container-color: map.get($systems, md-sys-color, secondary),
      selected-focus-icon-color: map.get($systems, md-sys-color, secondary),
      selected-focus-state-layer-color: map.get($systems, md-sys-color, secondary),
      selected-hover-container-color: map.get($systems, md-sys-color, secondary),
      selected-hover-icon-color: map.get($systems, md-sys-color, secondary),
      selected-hover-state-layer-color: map.get($systems, md-sys-color, secondary),
      selected-icon-color: map.get($systems, md-sys-color, secondary),
      selected-pressed-container-color: map.get($systems, md-sys-color, secondary),
      selected-pressed-icon-color: map.get($systems, md-sys-color, secondary),
      unselected-pressed-state-layer-color: map.get($systems, md-sys-color, secondary),
      selected-checkmark-color: map.get($systems, md-sys-color, on-secondary),
    ),
    tertiary: (
      selected-container-color: map.get($systems, md-sys-color, tertiary),
      selected-focus-container-color: map.get($systems, md-sys-color, tertiary),
      selected-focus-icon-color: map.get($systems, md-sys-color, tertiary),
      selected-focus-state-layer-color: map.get($systems, md-sys-color, tertiary),
      selected-hover-container-color: map.get($systems, md-sys-color, tertiary),
      selected-hover-icon-color: map.get($systems, md-sys-color, tertiary),
      selected-hover-state-layer-color: map.get($systems, md-sys-color, tertiary),
      selected-icon-color: map.get($systems, md-sys-color, tertiary),
      selected-pressed-container-color: map.get($systems, md-sys-color, tertiary),
      selected-pressed-icon-color: map.get($systems, md-sys-color, tertiary),
      unselected-pressed-state-layer-color: map.get($systems, md-sys-color, tertiary),
      selected-checkmark-color: map.get($systems, md-sys-color, on-tertiary),
    ),
    error: (
      selected-container-color: map.get($systems, md-sys-color, error),
      selected-focus-container-color: map.get($systems, md-sys-color, error),
      selected-focus-icon-color: map.get($systems, md-sys-color, error),
      selected-focus-state-layer-color: map.get($systems, md-sys-color, error),
      selected-hover-container-color: map.get($systems, md-sys-color, error),
      selected-hover-icon-color: map.get($systems, md-sys-color, error),
      selected-hover-state-layer-color: map.get($systems, md-sys-color, error),
      selected-icon-color: map.get($systems, md-sys-color, error),
      selected-pressed-container-color: map.get($systems, md-sys-color, error),
      selected-pressed-icon-color: map.get($systems, md-sys-color, error),
      unselected-pressed-state-layer-color: map.get($systems, md-sys-color, error),
      selected-checkmark-color: map.get($systems, md-sys-color, on-error),
    )
  );

  @return token-definition.namespace-tokens(
    $prefix,
    (
     $mdc-tokens,
      $variant-tokens
    ),
    $token-slots
  );
}

@function values($deps, $exclude-hardcoded-values: false) {
  $values: (
    container-shape: if($exclude-hardcoded-values, null, 2px),
    container-size: if($exclude-hardcoded-values, null, 18px),
    error-focus-state-layer-color: map.get($deps, md-sys-color, error),
    error-focus-state-layer-opacity: map.get($deps, md-sys-state, focus-state-layer-opacity),
    error-hover-state-layer-color: map.get($deps, md-sys-color, error),
    error-hover-state-layer-opacity: map.get($deps, md-sys-state, hover-state-layer-opacity),
    error-pressed-state-layer-color: map.get($deps, md-sys-color, error),
    error-pressed-state-layer-opacity: map.get($deps, md-sys-state, pressed-state-layer-opacity),
    icon-size: if($exclude-hardcoded-values, null, 18px),
    selected-container-color: map.get($deps, md-sys-color, primary),
    selected-disabled-container-color: map.get($deps, md-sys-color, on-surface),
    disabled-selected-icon-opacity: 0.38,
    selected-disabled-container-opacity: if($exclude-hardcoded-values, null, 0.38),
    selected-disabled-container-outline-width: if($exclude-hardcoded-values, null, 0),
    selected-disabled-icon-color: map.get($deps, md-sys-color, surface),
    selected-error-container-color: map.get($deps, md-sys-color, error),
    selected-error-focus-container-color: map.get($deps, md-sys-color, error),
    selected-error-focus-icon-color: map.get($deps, md-sys-color, on-error),
    selected-error-hover-container-color: map.get($deps, md-sys-color, error),
    selected-error-hover-icon-color: map.get($deps, md-sys-color, on-error),
    selected-error-icon-color: map.get($deps, md-sys-color, on-error),
    selected-error-pressed-container-color: map.get($deps, md-sys-color, error),
    selected-error-pressed-icon-color: map.get($deps, md-sys-color, on-error),
    selected-focus-container-color: map.get($deps, md-sys-color, primary),
    selected-focus-icon-color: map.get($deps, md-sys-color, primary),
    selected-focus-outline-width: if($exclude-hardcoded-values, null, 0),
    selected-focus-state-layer-color: map.get($deps, md-sys-color, primary),
    selected-focus-state-layer-opacity: map.get($deps, md-sys-state, focus-state-layer-opacity),
    selected-hover-container-color: map.get($deps, md-sys-color, primary),
    selected-hover-icon-color: map.get($deps, md-sys-color, primary),
    selected-hover-outline-width: if($exclude-hardcoded-values, null, 0),
    selected-hover-state-layer-color: map.get($deps, md-sys-color, primary),
    selected-hover-state-layer-opacity: map.get($deps, md-sys-state, hover-state-layer-opacity),
    selected-icon-color: map.get($deps, md-sys-color, primary),
    selected-outline-width: if($exclude-hardcoded-values, null, 0),
    selected-pressed-container-color: map.get($deps, md-sys-color, primary),
    selected-pressed-icon-color: map.get($deps, md-sys-color, primary),
    selected-pressed-outline-width: if($exclude-hardcoded-values, null, 0),
    selected-pressed-state-layer-color: map.get($deps, md-sys-color, on-surface),
    selected-pressed-state-layer-opacity: map.get($deps, md-sys-state, pressed-state-layer-opacity),
    state-layer-shape: map.get($deps, md-sys-shape, corner-full),
    state-layer-size: if($exclude-hardcoded-values, null, 40px),
    unselected-disabled-container-opacity: if($exclude-hardcoded-values, null, 0.38),
    disabled-unselected-icon-opacity: 0.38,
    unselected-disabled-outline-color: map.get($deps, md-sys-color, on-surface),
    unselected-disabled-outline-width: if($exclude-hardcoded-values, null, 2px),
    unselected-error-focus-outline-color: map.get($deps, md-sys-color, error),
    unselected-error-hover-outline-color: map.get($deps, md-sys-color, error),
    unselected-error-outline-color: map.get($deps, md-sys-color, error),
    unselected-error-pressed-outline-color: map.get($deps, md-sys-color, error),
    unselected-focus-outline-color: map.get($deps, md-sys-color, on-surface),
    unselected-focus-outline-width: if($exclude-hardcoded-values, null, 2px),
    unselected-focus-state-layer-color: map.get($deps, md-sys-color, on-surface),
    unselected-focus-state-layer-opacity: map.get($deps, md-sys-state, focus-state-layer-opacity),
    unselected-hover-outline-color: map.get($deps, md-sys-color, on-surface),
    unselected-hover-outline-width: if($exclude-hardcoded-values, null, 2px),
    unselected-hover-state-layer-color: map.get($deps, md-sys-color, on-surface),
    unselected-hover-state-layer-opacity: map.get($deps, md-sys-state, hover-state-layer-opacity),
    unselected-outline-color: map.get($deps, md-sys-color, on-surface-variant),
    unselected-outline-width: if($exclude-hardcoded-values, null, 2px),
    unselected-pressed-outline-color: map.get($deps, md-sys-color, on-surface),
    unselected-pressed-outline-width: if($exclude-hardcoded-values, null, 2px),
    unselected-pressed-state-layer-color: map.get($deps, md-sys-color, primary),
    unselected-pressed-state-layer-opacity:
      map.get($deps, md-sys-state, pressed-state-layer-opacity),
    selected-checkmark-color: map.get($deps, md-sys-color, on-primary),
    disabled-selected-checkmark-color: map.get($deps, md-sys-color, surface),
    disabled-selected-icon-color: map.get($deps, md-sys-color, on-surface),
    disabled-unselected-icon-color: map.get($deps, md-sys-color, on-surface),
    unselected-focus-icon-color: map.get($deps, md-sys-color, on-surface),
    unselected-hover-icon-color: map.get($deps, md-sys-color, on-surface),
    unselected-icon-color: map.get($deps, md-sys-color, on-surface-variant),
    unselected-pressed-icon-color: map.get($deps, md-sys-color, on-surface),
  );

  $values: token-definition.combine-color-tokens(
      $values, $values, (
      (
        color: disabled-selected-icon-color,
        opacity: disabled-selected-icon-opacity,
      ),
      (
        color: disabled-unselected-icon-color,
        opacity: disabled-unselected-icon-opacity,
      ),
    ));

  @return $values;
}
