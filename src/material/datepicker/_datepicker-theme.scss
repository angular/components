@use 'sass:color';
@use 'sass:map';
@use './m2-datepicker';
@use './m3-datepicker';
@use '../core/theming/theming';
@use '../core/theming/inspection';
@use '../core/tokens/token-utils';
@use '../core/typography/typography';
@use '../button/icon-button-theme';

/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)
/// for the mat-datepicker.
/// @param {Map} $theme The theme to generate base styles for.
@mixin base($theme) {
  $tokens: m2-datepicker.get-unthemable-tokens();
  @if inspection.get-theme-version($theme) == 1 {
    $tokens: map.get(m3-datepicker.get-tokens($theme), base);
  }

  @include token-utils.values($tokens);
}

/// Outputs color theme styles for the mat-datepicker.
/// @param {Map} $theme The theme to generate color styles for.
/// @param {String} $color-variant The color variant to use for the component (M3 only)
@mixin color($theme, $color-variant: null) {
  $tokens: m2-datepicker.get-color-tokens($theme, primary);
  @if inspection.get-theme-version($theme) == 1 {
    $tokens: map.get(m3-datepicker.get-tokens($theme, $color-variant), color);
  }

  @include token-utils.values($tokens);

  @if inspection.get-theme-version($theme) != 1 {
    .mat-datepicker-content, .mat-datepicker-toggle-active {
      &.mat-accent {
        $tokens: m2-datepicker.get-color-tokens($theme, secondary);
        @include token-utils.values($tokens);
      }

      &.mat-warn {
        $tokens: m2-datepicker.get-color-tokens($theme, error);
        @include token-utils.values($tokens);
      }
    }
  }
}

/// Outputs typography theme styles for the mat-datepicker.
/// @param {Map} $theme The theme to generate typography styles for.
@mixin typography($theme) {
  $tokens: m2-datepicker.get-typography-tokens($theme);
  @if inspection.get-theme-version($theme) == 1 {
    $tokens: map.get(m3-datepicker.get-tokens($theme), typography);
  }

  @include token-utils.values($tokens);
}

@mixin date-range-colors(
  $range-color,
  $comparison-color: rgba(#f9ab00, 0.2),
  $overlap-color: #a8dab5,
  $overlap-selected-color: color.adjust($overlap-color, $lightness: -30%)
) {
  @include overrides((
    calendar-date-in-range-state-background-color: $range-color,
    calendar-date-in-comparison-range-state-background-color: $comparison-color,
    calendar-date-in-overlap-range-state-background-color: $overlap-color,
    calendar-date-in-overlap-range-selected-state-background-color: $overlap-selected-color,
  ));
}

/// Outputs density theme styles for the mat-datepicker.
/// @param {Map} $theme The theme to generate density styles for.
@mixin density($theme) {
  $tokens: m2-datepicker.get-density-tokens($theme);
  @if inspection.get-theme-version($theme) == 1 {
    $tokens: map.get(m3-datepicker.get-tokens($theme), density);
  }

  @include token-utils.values($tokens);

  @if inspection.get-theme-version($theme) != 1 {
    // TODO(crisbeto): move this into the structural styles
    // once the icon button density is switched to tokens.

    // Regardless of the user-passed density, we want the calendar
    // previous/next buttons to remain at density -2
    .mat-calendar-controls {
      @include icon-button-theme.density(-2);
    }
  }
}

/// Defines the tokens that will be available in the `overrides` mixin and for docs extraction.
@function _define-overrides() {
  @return (
    (
      namespace: datepicker,
      tokens: token-utils.get-overrides(m3-datepicker.get-tokens(), datepicker)
    ),
  );
}

/// Outputs the CSS variable values for the given tokens.
/// @param {Map} $tokens The token values to emit.
@mixin overrides($tokens: ()) {
    @include token-utils.batch-create-token-values($tokens, _define-overrides());
}

/// Outputs all (base, color, typography, and density) theme styles for the mat-datepicker.
/// @param {Map} $theme The theme to generate styles for.
/// @param {String} $color-variant The color variant to use for the component (M3 only)
@mixin theme($theme, $color-variant: null) {
  @include theming.private-check-duplicate-theme-styles($theme, 'mat-datepicker') {
    @if inspection.get-theme-version($theme) == 1 {
      @include base($theme);
      @include color($theme, $color-variant);
      @include density($theme);
      @include typography($theme);
    } @else {
      @include base($theme);
      @if inspection.theme-has($theme, color) {
        @include color($theme);
      }
      @if inspection.theme-has($theme, density) {
        @include density($theme);
      }
      @if inspection.theme-has($theme, typography) {
        @include typography($theme);
      }
    }
  }
}
