@use '../core/style/layout-common';
@use '../core/style/vendor-prefixes';
@use '../core/tokens/token-utils';
@use './m2-slide-toggle';
@use '@angular/cdk';

$_interactive-disabled-selector: '.mat-mdc-slide-toggle-disabled-interactive.mdc-switch--disabled';

$token-prefix: m2-slide-toggle.$prefix;
$token-slots: m2-slide-toggle.get-token-slots();


.mdc-switch {
  align-items: center;
  background: none;
  border: none;
  cursor: pointer;
  display: inline-flex;
  flex-shrink: 0;
  margin: 0;
  outline: none;
  overflow: visible;
  padding: 0;
  position: relative;

  @include token-utils.use-tokens($token-prefix, $token-slots) {
    width: token-utils.slot(track-width);
  }

  &.mdc-switch--disabled {
    cursor: default;
    pointer-events: none;
  }

  &.mat-mdc-slide-toggle-disabled-interactive {
    pointer-events: auto;
  }
}

.mdc-switch__track {
  overflow: hidden;
  position: relative;
  width: 100%;

  @include token-utils.use-tokens($token-prefix, $token-slots) {
    height: token-utils.slot(track-height);
    border-radius: token-utils.slot(track-shape);

    .mdc-switch--disabled.mdc-switch & {
      opacity: token-utils.slot(disabled-track-opacity);
    }
  }

  &::before,
  &::after {
    border: 1px solid transparent;
    border-radius: inherit;
    box-sizing: border-box;
    content: '';
    height: 100%;
    left: 0;
    position: absolute;
    width: 100%;

    @include token-utils.use-tokens($token-prefix, $token-slots) {
      border-width: token-utils.slot(track-outline-width);
      border-color: token-utils.slot(track-outline-color);

      .mdc-switch--selected & {
        border-width: token-utils.slot(selected-track-outline-width);
        border-color: token-utils.slot(selected-track-outline-color);
      }

      .mdc-switch--disabled & {
        border-width: token-utils.slot(disabled-unselected-track-outline-width);
        border-color: token-utils.slot(disabled-unselected-track-outline-color);
      }
    }
  }

  @include cdk.high-contrast {
    border-color: currentColor;
  }

  &::before {
    transition: transform 75ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transform: translateX(0);

    @include token-utils.use-tokens($token-prefix, $token-slots) {
      background: token-utils.slot(unselected-track-color);
    }

    .mdc-switch--selected & {
      transition: transform 75ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
      transform: translateX(100%);

      [dir='rtl'] .mdc-switch--selected & {
        transform: translateX(-100%);
      }
    }

    @include token-utils.use-tokens($token-prefix, $token-slots) {
      .mdc-switch--selected & {
        opacity: token-utils.slot(hidden-track-opacity);
        transition: token-utils.slot(hidden-track-transition);
      }

      .mdc-switch--unselected & {
        opacity: token-utils.slot(visible-track-opacity);
        transition: token-utils.slot(visible-track-transition);
      }
    }

    @include token-utils.use-tokens($token-prefix, $token-slots) {
      .mdc-switch:enabled:hover:not(:focus):not(:active) & {
        background: token-utils.slot(unselected-hover-track-color);
      }

      .mdc-switch:enabled:focus:not(:active) & {
        background: token-utils.slot(unselected-focus-track-color);
      }

      .mdc-switch:enabled:active & {
        background: token-utils.slot(unselected-pressed-track-color);
      }

      #{$_interactive-disabled-selector}:hover:not(:focus):not(:active) &,
      #{$_interactive-disabled-selector}:focus:not(:active) &,
      #{$_interactive-disabled-selector}:active &,
      .mdc-switch.mdc-switch--disabled & {
        background: token-utils.slot(disabled-unselected-track-color);
      }
    }
  }

  &::after {
    transform: translateX(-100%);

    @include token-utils.use-tokens($token-prefix, $token-slots) {
      background: token-utils.slot(selected-track-color);
    }

    [dir='rtl'] & {
      transform: translateX(100%);
    }

    .mdc-switch--selected & {
      transform: translateX(0);
    }

    @include token-utils.use-tokens($token-prefix, $token-slots) {
      .mdc-switch--selected & {
        opacity: token-utils.slot(visible-track-opacity);
        transition: token-utils.slot(visible-track-transition);
      }

      .mdc-switch--unselected & {
        opacity: token-utils.slot(hidden-track-opacity);
        transition: token-utils.slot(hidden-track-transition);
      }
    }

    @include token-utils.use-tokens($token-prefix, $token-slots) {
      .mdc-switch:enabled:hover:not(:focus):not(:active) & {
        background: token-utils.slot(selected-hover-track-color);
      }

      .mdc-switch:enabled:focus:not(:active) & {
        background: token-utils.slot(selected-focus-track-color);
      }

      .mdc-switch:enabled:active & {
        background: token-utils.slot(selected-pressed-track-color);
      }

      #{$_interactive-disabled-selector}:hover:not(:focus):not(:active) &,
      #{$_interactive-disabled-selector}:focus:not(:active) &,
      #{$_interactive-disabled-selector}:active &,
      .mdc-switch.mdc-switch--disabled & {
        background: token-utils.slot(disabled-selected-track-color);
      }
    }
  }
}

.mdc-switch__handle-track {
  height: 100%;
  pointer-events: none;
  position: absolute;
  top: 0;
  transition: transform 75ms 0ms cubic-bezier(0.4, 0, 0.2, 1);
  left: 0;
  right: auto;
  transform: translateX(0);

  @include token-utils.use-tokens($token-prefix, $token-slots) {
    width: calc(100% - #{token-utils.slot(handle-width)});
  }

  [dir='rtl'] & {
    left: auto;
    right: 0;
  }

  .mdc-switch--selected & {
    transform: translateX(100%);

    [dir='rtl'] & {
      transform: translateX(-100%);
    }
  }
}

.mdc-switch__handle {
  display: flex;
  pointer-events: auto;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  left: 0;
  right: auto;

  // Used for M3 animations. Does not affect the M2 slide-toggle
  // because the width and height are static, and the margin is unused.
  transition:
    width 75ms cubic-bezier(0.4, 0, 0.2, 1),
    height 75ms cubic-bezier(0.4, 0, 0.2, 1),
    margin 75ms cubic-bezier(0.4, 0, 0.2, 1);

  @include token-utils.use-tokens($token-prefix, $token-slots) {
    width: token-utils.slot(handle-width);
    height: token-utils.slot(handle-height);
    border-radius: token-utils.slot(handle-shape);
  }

  [dir='rtl'] & {
    left: auto;
    right: 0;
  }

  @include token-utils.use-tokens($token-prefix, $token-slots) {
    .mat-mdc-slide-toggle .mdc-switch--unselected & {
      width: token-utils.slot(unselected-handle-size);
      height: token-utils.slot(unselected-handle-size);
      margin: token-utils.slot(unselected-handle-horizontal-margin);

      &:has(.mdc-switch__icons) {
        margin: token-utils.slot(unselected-with-icon-handle-horizontal-margin);
      }
    }

    .mat-mdc-slide-toggle .mdc-switch--selected & {
      width: token-utils.slot(selected-handle-size);
      height: token-utils.slot(selected-handle-size);
      margin: token-utils.slot(selected-handle-horizontal-margin);

      &:has(.mdc-switch__icons) {
        margin: token-utils.slot(selected-with-icon-handle-horizontal-margin);
      }
    }

    .mat-mdc-slide-toggle &:has(.mdc-switch__icons) {
      width: token-utils.slot(with-icon-handle-size);
      height: token-utils.slot(with-icon-handle-size);
    }

    .mat-mdc-slide-toggle .mdc-switch:active:not(.mdc-switch--disabled) & {
      width: token-utils.slot(pressed-handle-size);
      height: token-utils.slot(pressed-handle-size);
    }

    .mat-mdc-slide-toggle .mdc-switch--selected:active:not(.mdc-switch--disabled) & {
      margin: token-utils.slot(selected-pressed-handle-horizontal-margin);
    }

    .mat-mdc-slide-toggle .mdc-switch--unselected:active:not(.mdc-switch--disabled) & {
      margin: token-utils.slot(unselected-pressed-handle-horizontal-margin);
    }

    .mdc-switch--disabled.mdc-switch--selected &::after {
      opacity: token-utils.slot(disabled-selected-handle-opacity);
    }

    .mdc-switch--disabled.mdc-switch--unselected &::after {
      opacity: token-utils.slot(disabled-unselected-handle-opacity);
    }
  }

  &::before,
  &::after {
    border: 1px solid transparent;
    border-radius: inherit;
    box-sizing: border-box;
    content: '';
    width: 100%;
    height: 100%;
    left: 0;
    position: absolute;
    top: 0;
    transition: background-color 75ms 0ms cubic-bezier(0.4, 0, 0.2, 1),
      border-color 75ms 0ms cubic-bezier(0.4, 0, 0.2, 1);
    z-index: -1;

    @include cdk.high-contrast {
      border-color: currentColor;
    }
  }

  @include token-utils.use-tokens($token-prefix, $token-slots) {
    &::after {
      .mdc-switch--selected:enabled & {
        background: token-utils.slot(selected-handle-color);
      }

      .mdc-switch--selected:enabled:hover:not(:focus):not(:active) & {
        background: token-utils.slot(selected-hover-handle-color);
      }

      .mdc-switch--selected:enabled:focus:not(:active) & {
        background: token-utils.slot(selected-focus-handle-color);
      }

      .mdc-switch--selected:enabled:active & {
        background: token-utils.slot(selected-pressed-handle-color);
      }

      #{$_interactive-disabled-selector}.mdc-switch--selected:hover:not(:focus):not(:active) &,
      #{$_interactive-disabled-selector}.mdc-switch--selected:focus:not(:active) &,
      #{$_interactive-disabled-selector}.mdc-switch--selected:active &,
      .mdc-switch--selected.mdc-switch--disabled & {
        background: token-utils.slot(disabled-selected-handle-color);
      }

      .mdc-switch--unselected:enabled & {
        background: token-utils.slot(unselected-handle-color);
      }

      .mdc-switch--unselected:enabled:hover:not(:focus):not(:active) & {
        background: token-utils.slot(unselected-hover-handle-color);
      }

      .mdc-switch--unselected:enabled:focus:not(:active) & {
        background: token-utils.slot(unselected-focus-handle-color);
      }

      .mdc-switch--unselected:enabled:active & {
        background: token-utils.slot(unselected-pressed-handle-color);
      }

      .mdc-switch--unselected.mdc-switch--disabled & {
        background: token-utils.slot(disabled-unselected-handle-color);
      }
    }

    &::before {
      background: token-utils.slot(handle-surface-color);
    }
  }
}

.mdc-switch__shadow {
  border-radius: inherit;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;

  @include token-utils.use-tokens($token-prefix, $token-slots) {
    .mdc-switch:enabled & {
      box-shadow: token-utils.slot(handle-elevation-shadow);
    }

    #{$_interactive-disabled-selector}:hover:not(:focus):not(:active) &,
    #{$_interactive-disabled-selector}:focus:not(:active) &,
    #{$_interactive-disabled-selector}:active &,
    .mdc-switch.mdc-switch--disabled & {
      box-shadow: token-utils.slot(disabled-handle-elevation-shadow);
    }
  }
}

.mdc-switch__ripple {
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
  z-index: -1;

  @include token-utils.use-tokens($token-prefix, $token-slots) {
    width: token-utils.slot(state-layer-size);
    height: token-utils.slot(state-layer-size);
  }

  &::after {
    content: '';
    opacity: 0;

    .mdc-switch--disabled & {
      display: none;
    }

    .mat-mdc-slide-toggle-disabled-interactive & {
      display: block;
    }

    .mdc-switch:hover & {
      opacity: 0.04;
      transition: 75ms opacity cubic-bezier(0, 0, 0.2, 1);
    }

    // Needs a little more specificity so the :hover styles don't override it.
    .mat-mdc-slide-toggle.mat-mdc-slide-toggle-focused .mdc-switch & {
      opacity: 0.12;
    }

    @include token-utils.use-tokens($token-prefix, $token-slots) {
      #{$_interactive-disabled-selector}:enabled:focus &,
      #{$_interactive-disabled-selector}:enabled:active &,
      #{$_interactive-disabled-selector}:enabled:hover:not(:focus) &,
      .mdc-switch--unselected:enabled:hover:not(:focus) & {
        background: token-utils.slot(unselected-hover-state-layer-color);
      }

      .mdc-switch--unselected:enabled:focus & {
        background: token-utils.slot(unselected-focus-state-layer-color);
      }

      .mdc-switch--unselected:enabled:active & {
        background: token-utils.slot(unselected-pressed-state-layer-color);
        opacity: token-utils.slot(unselected-pressed-state-layer-opacity);
        transition: opacity 75ms linear;
      }

      .mdc-switch--selected:enabled:hover:not(:focus) & {
        background: token-utils.slot(selected-hover-state-layer-color);
      }

      .mdc-switch--selected:enabled:focus & {
        background: token-utils.slot(selected-focus-state-layer-color);
      }

      .mdc-switch--selected:enabled:active & {
        background: token-utils.slot(selected-pressed-state-layer-color);
        opacity: token-utils.slot(selected-pressed-state-layer-opacity);
        transition: opacity 75ms linear;
      }
    }
  }
}

.mdc-switch__icons {
  position: relative;
  height: 100%;
  width: 100%;
  z-index: 1;

  // Works around a rendering issue in Safari 18.3 (see #30487).
  transform: translateZ(0);

  @include token-utils.use-tokens($token-prefix, $token-slots) {
    .mdc-switch--disabled.mdc-switch--unselected & {
      opacity: token-utils.slot(disabled-unselected-icon-opacity);
    }

    .mdc-switch--disabled.mdc-switch--selected & {
      opacity: token-utils.slot(disabled-selected-icon-opacity);
    }
  }
}

.mdc-switch__icon {
  bottom: 0;
  left: 0;
  margin: auto;
  position: absolute;
  right: 0;
  top: 0;
  opacity: 0;
  transition: opacity 30ms 0ms cubic-bezier(0.4, 0, 1, 1);

  @include token-utils.use-tokens($token-prefix, $token-slots) {
    .mdc-switch--unselected & {
      width: token-utils.slot(unselected-icon-size);
      height: token-utils.slot(unselected-icon-size);
      fill: token-utils.slot(unselected-icon-color);
    }

    .mdc-switch--unselected.mdc-switch--disabled & {
      fill: token-utils.slot(disabled-unselected-icon-color);
    }

    .mdc-switch--selected & {
      width: token-utils.slot(selected-icon-size);
      height: token-utils.slot(selected-icon-size);
      fill: token-utils.slot(selected-icon-color);
    }

    .mdc-switch--selected.mdc-switch--disabled & {
      fill: token-utils.slot(disabled-selected-icon-color);
    }
  }
}

.mdc-switch--selected .mdc-switch__icon--on,
.mdc-switch--unselected .mdc-switch__icon--off {
  opacity: 1;
  transition: opacity 45ms 30ms cubic-bezier(0, 0, 0.2, 1);
}

.mat-mdc-slide-toggle {
  @include vendor-prefixes.user-select(none);
  display: inline-block;
  -webkit-tap-highlight-color: transparent;

  // Remove the native outline since we use the ripple for focus indication.
  outline: 0;

  // The ripple needs extra specificity so the base ripple styling doesn't override its `position`.
  .mat-mdc-slide-toggle-ripple,
  .mdc-switch__ripple::after {
    @include layout-common.fill();
    border-radius: 50%;
    // Disable pointer events for the ripple container so that it doesn't eat the mouse events meant
    // for the input. Pointer events can be safely disabled because the ripple trigger element is
    // the host element.
    pointer-events: none;
    // Fixes the ripples not clipping to the border radius on Safari. Uses `:not(:empty)`
    // in order to avoid creating extra layers when there aren't any ripples.
    &:not(:empty) {
      transform: translateZ(0);
    }
  }

  // Needs a little more specificity so the :hover styles don't override it.
  // For slide-toggles render the focus indicator when we know
  // the hidden input is focused (slightly different for each control).
  &.mat-mdc-slide-toggle-focused .mat-focus-indicator::before {
    content: '';
  }

  .mat-internal-form-field {
    @include token-utils.use-tokens($token-prefix, $token-slots) {
      color: token-utils.slot(label-text-color);
      font-family: token-utils.slot(label-text-font);
      line-height: token-utils.slot(label-text-line-height);
      font-size: token-utils.slot(label-text-size);
      letter-spacing: token-utils.slot(label-text-tracking);
      font-weight: token-utils.slot(label-text-weight);
    }
  }

  .mat-ripple-element {
    opacity: 0.12;
  }

  // Slide-toggle components have to set `border-radius: 50%` in order to support density scaling
  // which will clip a square focus indicator so we have to turn it into a circle.
  .mat-focus-indicator::before {
    border-radius: 50%;
  }

  &._mat-animation-noopable {
    .mdc-switch__handle-track,
    .mdc-switch__icon,
    .mdc-switch__handle::before,
    .mdc-switch__handle::after,
    .mdc-switch__track::before,
    .mdc-switch__track::after {
      transition: none;
    }
  }

  // If our slide-toggle is enabled the cursor on label should appear as a pointer.
  .mdc-switch:enabled + .mdc-label {
    cursor: pointer;
  }

  // TODO(wagnermaciel): Use our custom token system to emit this css rule.
  .mdc-switch--disabled + label {
    color: var(--mat-slide-toggle-disabled-label-text-color);
  }
}
