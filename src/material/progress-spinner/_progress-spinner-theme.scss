@use '../core/theming/theming';
@use '../core/theming/inspection';
@use '../core/tokens/token-utils';
@use './m2-progress-spinner';
@use './m3-progress-spinner';
@use 'sass:map';

@mixin base($theme) {
  $tokens: m2-progress-spinner.get-unthemable-tokens();
  @if inspection.get-theme-version($theme) == 1 {
    $tokens: map.get(m3-progress-spinner.get-tokens($theme), base);
  }

  @include token-utils.values($tokens);
}

/// Outputs color theme styles for the mat-progress-spinner.
/// @param {Map} $theme The theme to generate color styles for.
/// @param {String} $color-variant The color variant to use for the component (M3 only)
@mixin color($theme, $color-variant: null) {
  $tokens: m2-progress-spinner.get-color-tokens($theme, primary);
  @if inspection.get-theme-version($theme) == 1 {
    $tokens: map.get(m3-progress-spinner.get-tokens($theme, $color-variant), color);
  }

  @include token-utils.values($tokens);

  @if inspection.get-theme-version($theme) != 1 {
    .mat-accent {
      $tokens: m2-progress-spinner.get-color-tokens($theme, secondary);
      @include token-utils.values($tokens);
    }

    .mat-warn {
      $tokens: m2-progress-spinner.get-color-tokens($theme, error);
      @include token-utils.values($tokens);
    }
  }
}

@mixin typography($theme) {
  $tokens: m2-progress-spinner.get-typography-tokens($theme);
  @if inspection.get-theme-version($theme) == 1 {
    $tokens: map.get(m3-progress-spinner.get-tokens($theme), typography);
  }

  @include token-utils.values($tokens);
}

@mixin density($theme) {
  $tokens: m2-progress-spinner.get-density-tokens($theme);
  @if inspection.get-theme-version($theme) == 1 {
    $tokens: map.get(m3-progress-spinner.get-tokens($theme), density);
  }

  @include token-utils.values($tokens);
}

/// Defines the tokens that will be available in the `overrides` mixin and for docs extraction.
@function _define-overrides() {
  @return (
    (
      namespace: progress-spinner,
      tokens: token-utils.get-overrides(m3-progress-spinner.get-tokens(), progress-spinner)
    ),
  );
}

/// Outputs the CSS variable values for the given tokens.
/// @param {Map} $tokens The token values to emit.
@mixin overrides($tokens: ()) {
    @include token-utils.batch-create-token-values($tokens, _define-overrides());
}

/// Outputs all (base, color, typography, and density) theme styles for the mat-progress-spinner.
/// @param {Map} $theme The theme to generate styles for.
/// @param {String} $color-variant The color variant to use for the component (M3 only)
@mixin theme($theme, $color-variant: null) {
  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-spinner') {
    @if inspection.get-theme-version($theme) == 1 {
      @include base($theme);
      @include color($theme, $color-variant);
      @include density($theme);
      @include typography($theme);
    } @else {
      @include base($theme);
      @if inspection.theme-has($theme, color) {
        @include color($theme);
      }
      @if inspection.theme-has($theme, density) {
        @include density($theme);
      }
      @if inspection.theme-has($theme, typography) {
        @include typography($theme);
      }
    }
  }
}
